#!/usr/bin/env python3
#
# Copyright 2018 Google LLC
#
# Use of this source code is governed by an MIT-style
# license that can be found in the LICENSE file or at
# https://opensource.org/licenses/MIT.

import argparse
import pathlib

import cipherlist
import hexjson
import tvgen
import tvstore
import writers.c

_file = pathlib.Path(__file__).resolve()


def write(cipher):
    tvgen.write_tests(tv_store, cipher)


def check(cipher):
    test = cipher.name().lower()
    print(f"======== {test} ========")
    for r in cipher.other_testvectors(tvdir):
        tvgen.check_testvector(cipher, r, verbose)
    for v in cipher.variants():
        cipher.variant = v
        tvgen.check_tests(tv_store, cipher, verbose)


def print_others(cipher):
    test = cipher.name().lower()
    print(f"======== {test} ========")
    hexjson.dump_using_hex(cipher.other_testvectors(tvdir))


def convert_c(cipher):
    targetdir = tvdir / "converted" / "c"
    writers.c.convert(tv_store, targetdir, cipher)


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--verbose', action='store_true')
    parser.add_argument('--cipher', action='append')
    subparsers = parser.add_subparsers(required=True, dest='subcommand')
    subparsers.add_parser('write').set_defaults(func=write)
    subparsers.add_parser('check').set_defaults(func=check)
    subparsers.add_parser('print').set_defaults(func=print_others)
    subparsers.add_parser('convert_c').set_defaults(func=convert_c)
    return parser.parse_args()


def main():
    args = parse_args()
    top = _file.parent.parent
    global tvdir
    tvdir = top / "test_vectors"
    global tv_store
    tv_store = tvstore.TvStore(tvdir)
    global verbose
    verbose = False

    if args.cipher is None:
        ciphers = cipherlist.ciphers
    else:
        ciphers = [cipherlist.lookup_cipher(c) for c in args.cipher]
    for cipher in ciphers:
        args.func(cipher)


if __name__ == "__main__":
    main()
