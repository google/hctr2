#!/usr/bin/env python3
#
# Copyright 2018 Google LLC
#
# Use of this source code is governed by an MIT-style
# license that can be found in the LICENSE file or at
# https://opensource.org/licenses/MIT.

import pathlib
import sys

import cipherlist
import hexjson
import tvgen

_file = pathlib.Path(__file__).resolve()
top = _file.parent.parent
tvdir = top / "test_vectors"
path = tvdir / "ours"

verbose = False


def write(ciphers):
    for cipher in ciphers:
        tvgen.write_tests(cipher, path)


def check(ciphers):
    for cipher in ciphers:
        test = cipher.name().lower()
        print(f"======== {test} ========")
        for r in cipher.other_testvectors(tvdir):
            tvgen.check_testvector(cipher, r, verbose)
        tvgen.check_tests(cipher, path, verbose)


def print_others(ciphers):
    for cipher in ciphers:
        test = cipher.name().lower()
        print(f"======== {test} ========")
        hexjson.dump_using_hex(cipher.other_testvectors(tvdir))


def main():
    if len(sys.argv) not in [2, 3]:
        raise Exception("Bad args: {} use write or check".format(sys.argv[1:]))
    command = sys.argv[1]
    ciphers = cipherlist.ciphers
    if len(sys.argv) == 3:
        ciphers = [c for c in cipherlist.ciphers if c.name() ==
                   sys.argv[2]]
        if not ciphers:
            raise Exception(f"No cipher known called {sys.argv[2]}")
    if command == "write":
        write(ciphers)
    elif command == "check":
        check(ciphers)
    elif command == "print":
        print_others(ciphers)
    else:
        raise Exception("Bad args: {} use write or check".format(sys.argv[1:]))


if __name__ == "__main__":
    main()
