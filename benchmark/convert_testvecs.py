#!/usr/bin/env python3
# Copyright 2018 Google LLC
#
# Use of this source code is governed by an MIT-style
# license that can be found in the LICENSE file or at
# https://opensource.org/licenses/MIT.

"""Convert JSON test vectors from ../test_vectors/ into C headers in ./testvectors/"""

import pathlib
import random
import sys

scriptdir = pathlib.Path(__file__).parent
targetdir = scriptdir / "testvectors"
topdir = scriptdir.resolve().parent

sys.path.append(str(topdir / "python"))

import hexjson

def write_in_groups(f, prefix, separator, suffix, emptyval, convert, values):
    first = True
    for v in values:
        if first:
            f.write(prefix)
            first = False
        else:
            f.write(separator)
        convert(f, v)
    if first:
        f.write(emptyval)
    else:
        f.write(suffix)


def group_string(s, l):
    for i in range(0, len(s), l):
        yield s[i:i + l]


def write_as_c_string(f, b):
    hex = ''.join(f"\\x{a:02x}" for a in b)
    f.write(f'"{hex}"')


def write_data_field(f, prefix, separator, suffix, emptyval, value):
    write_in_groups(f, prefix, separator, suffix, emptyval,
                    write_as_c_string, group_string(value, 8))


def write_testvec_structs(f, struct, name, entries):
    f.write(f"const struct {struct} {name}[] = {{\n")
    for vec in entries:
        f.write("\t{\n")
        for k, v in vec.items():
            f.write(f"\t\t.{k} = {{.len = {len(v)}, .data =")
            write_data_field(f, '\n\t\t\t', '\n\t\t\t', '', ' ""', v)
            f.write('},\n')
        f.write("\t},\n")
    f.write(f"}};\n\n")


def convert_hctr2_testvec(v):
    return {
        'key': v['input']['key'],
        'tweak': v['input']['tweak'],
        'plaintext': v['plaintext'],
        'ciphertext': v['ciphertext'],
    }


def hctr2():
    """Convert test vectors for the given HCTR2 variant."""

    vectors = topdir / "test_vectors" / "ours" / "HCTR2"
    targetdir.mkdir(parents=True, exist_ok=True)
    target = targetdir / f"hctr2_testvecs.c"
    with target.open("w") as f:
        f.write("/* GENERATED BY convert_testvecs.py, DO NOT EDIT */\n\n")
        f.write('#include "hctr2_testvecs.h"\n\n')
        vectorfile = vectors / f'HCTR2_AES256.json'
        write_testvec_structs(f, 'hctr2_testvec',
                              f'hctr2_aes256_tv',
                              (convert_hctr2_testvec(s) for s in hexjson.iter_unhex(vectorfile)))
        f.write(f"const size_t hctr2_aes256_tv_count = ARRAY_SIZE(hctr2_aes256_tv);\n")


def main():
    hctr2()


if __name__ == "__main__":
    main()
